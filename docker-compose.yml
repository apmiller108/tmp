x-base: &base
  env_file: .env
  tty: true
  stdin_open: true
  build:
    context: .
    dockerfile: Dockerfile.dev

services:
  database:
    image: postgres:16
    restart: always
    volumes:
      - 'postgres:/var/lib/postgresql/data'
    ports:
      - "5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    mem_limit: 200m
  redis:
    image: redis:7
    restart: always
    volumes:
      - "redis:/data"
    ports:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    mem_limit: 100m
  ws:
    image: anycable/anycable-go:1.4
    ports:
      - '8085:8085'
    env_file: .env
    depends_on:
      redis:
        condition: service_healthy
    mem_limit: 100m
  app:
    <<: *base
    command: bash -c "rm -f tmp/pids/server.pid && /rails/bin/dev"
    restart: always
    volumes:
      - ".:/rails"
      - "/rails/node_modules" # don't mount node_modules
    ports:
      - "3000"
    links:
      - "database"
      - "redis"
    depends_on:
      database:
        condition: service_healthy
    mem_limit: 500m
  sidekiq:
    <<: *base
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: "bundle exec sidekiq"
    restart: always
    volumes:
      - ".:/rails"
      - "/rails/tmp" # don't mount tmp
    mem_limit: 500m
  anycable:
    <<: *base
    command: bundle exec anycable
    volumes:
      - ".:/rails"
    ports:
      - "50051"
    depends_on:
      database:
        condition: service_healthy
      ws:
        condition: service_started
    env_file:
      - ".env"
      - ".anycable.env"
    mem_limit: 200m
  nginx:
    image: nginx:1.27
    links:
      - "app"
    volumes:
      - "./config/nginx/development:/etc/nginx/conf.d"
      - "./app/assets:/app/public"
    ports:
      - "3000:80"
    mem_limit: 100m
  chrome: # docker-compose up -d chrome
    image: browserless/chrome:latest # See https://www.browserless.io/docs/docker
    ports:
      - "3333:3333"
    volumes:
      - .:/app:cached
    environment:
      PORT: 3333
      CONNECTION_TIMEOUT: -1 # No timeout
    mem_limit: 250m

volumes:
  redis:
  postgres:
